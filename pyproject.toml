[tool.poetry]
authors = ["Robert Kaussow <mail@thegeeklab.de>"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Environment :: Console",
  "License :: OSI Approved :: MIT License",
  "Intended Audience :: Developers",
  "Intended Audience :: Information Technology",
  "Intended Audience :: System Administrators",
  "Natural Language :: English",
  "Operating System :: POSIX",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Utilities",
  "Topic :: Software Development",
]
description = "Creates a list of docker tags from a given version string."
documentation = "https://github.com/thegeeklab/docker-autotag/"
homepage = "https://github.com/thegeeklab/docker-autotag/"
include = [
  "LICENSE",
]
keywords = ["docker", "versioning", "automation", "ci"]
license = "MIT"
name = "docker-autotag"
packages = [
  {include = "dockerautotag"},
]
readme = "README.md"
repository = "https://github.com/thegeeklab/docker-autotag/"
version = "0.0.0"

[tool.poetry.dependencies]
colorama = "0.4.6"
python = "^3.7.0"
python-json-logger = "2.0.4"
semantic-version = "2.10.0"

[tool.poetry.scripts]
docker-autotag = "dockerautotag.cli:main"

[tool.poetry.group.dev.dependencies]
ruff = "0.0.243"
pytest = "7.2.1"
pytest-mock = "3.10.0"
pytest-cov = "4.0.0"
toml = "0.10.2"
yapf = "0.32.0"

[tool.poetry-dynamic-versioning]
enable = true
style = "semver"
vcs = "git"

[tool.isort]
default_section = "THIRDPARTY"
force_single_line = true
line_length = 99
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
skip_glob = ["**/.env*", "**/env/*", "**/.venv/*", "**/docs/*"]

[tool.pytest.ini_options]
addopts = "dockerautotag --cov=dockerautotag --cov-report=xml:coverage.xml --cov-report=term --cov-append --no-cov-on-fail"
filterwarnings = [
  "ignore::FutureWarning",
  "ignore:.*collections.*:DeprecationWarning",
  "ignore:.*pep8.*:FutureWarning",
]

[tool.coverage.run]
omit = ["**/test/*"]

[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]

[tool.ruff]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "test",
    "*.pyc",
    "*.egg-info",
    ".cache",
    ".eggs",
    "env*",
]
# Explanation of errors
#
# D102: Missing docstring in public method
# D103: Missing docstring in public function
# D105: Missing docstring in magic method
# D107: Missing docstring in __init__
# D202: No blank lines allowed after function docstring
# D203: One blank line required before class docstring
# D212: Multi-line docstring summary should start at the first line
ignore = [
    "D102",
    "D103",
    "D105",
    "D107",
    "D202",
    "D203",
    "D212",
]
line-length = 99
select = [
    "D",
    "E",
    "F",
    "Q",
    "W",
    "I",
    "S",
    "BLE",
    "N",
    "UP",
    "B",
    "A",
    "C4",
    "T20",
    "SIM",
    "RET",
    "ARG",
    "ERA",
    "RUF",
]

[tool.ruff.flake8-quotes]
inline-quotes = "double"

[tool.yapf]
based_on_style = "google"
column_limit = 99
dedent_closing_brackets = true
coalesce_brackets = true
split_before_logical_operator = true
indent_dictionary_value = true
allow_split_before_dict_value = false
